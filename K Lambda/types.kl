
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun declare (V3199 V3200)
 (let Record (set shen-*signedfuncs* (adjoin V3199 (value shen-*signedfuncs*)))
  (let Variancy
   (trap-error (shen-variancy-test V3199 V3200) (lambda E shen-skip))
   (let Type (shen-rcons_form V3200)
    (let F* (concat shen-type-signature-of- V3199)
     (let Parameters (shen-parameters 1)
      (let Clause
       (cons (cons F* (cons X ()))
        (cons :- (cons (cons (cons unify! (cons X (cons Type ()))) ()) ())))
       (let AUM_instruction (shen-aum Clause Parameters)
        (let Code (shen-aum_to_shen AUM_instruction)
         (let ShenDef
          (cons define
           (cons F*
            (append Parameters
             (append (cons ProcessN (cons Continuation ()))
              (cons -> (cons Code ()))))))
          (let Eval (eval-without-macros ShenDef) V3199)))))))))))

(defun shen-variancy-test (V3201 V3202)
 (let TypeF (shen-typecheck V3201 B)
  (let Check
   (if (= symbol TypeF) shen-skip
    (if (shen-variant? TypeF V3202) shen-skip
     (intoutput "warning: changing the type of ~A may create errors~%"
      (@p V3201 ()))))
   shen-skip)))

(defun shen-variant? (V3211 V3212)
 (cond ((= V3212 V3211) true)
  ((and (cons? V3211) (and (cons? V3212) (= (hd V3212) (hd V3211))))
   (shen-variant? (tl V3211) (tl V3212)))
  ((and (cons? V3211)
    (and (cons? V3212) (and (shen-pvar? (hd V3211)) (variable? (hd V3212)))))
   (shen-variant? (subst shen-a (hd V3211) (tl V3211))
    (subst shen-a (hd V3212) (tl V3212))))
  ((and (cons? V3211)
    (and (cons? (hd V3211)) (and (cons? V3212) (cons? (hd V3212)))))
   (shen-variant? (append (hd V3211) (tl V3211))
    (append (hd V3212) (tl V3212))))
  (true false)))

(declare absvector? (cons A (cons --> (cons boolean ()))))

(declare and
 (cons boolean
  (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))))

(declare append
 (cons (cons list (cons A ()))
  (cons -->
   (cons
    (cons (cons list (cons A ()))
     (cons --> (cons (cons list (cons A ())) ())))
    ()))))

(declare apply
 (cons (cons A (cons --> (cons B ())))
  (cons --> (cons (cons A (cons --> (cons B ()))) ()))))

(declare arity (cons A (cons --> (cons number ()))))

(declare assoc
 (cons A
  (cons -->
   (cons
    (cons (cons list (cons (cons list (cons A ())) ()))
     (cons --> (cons (cons list (cons A ())) ())))
    ()))))

(declare average
 (cons number
  (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare boolean? (cons A (cons --> (cons boolean ()))))

(declare bound? (cons symbol (cons --> (cons boolean ()))))

(declare byte->string (cons number (cons --> (cons string ()))))

(declare cd (cons string (cons --> (cons string ()))))

(declare close
 (cons (cons stream (cons A ()))
  (cons --> (cons (cons list (cons B ())) ()))))

(declare cn
 (cons string
  (cons --> (cons (cons string (cons --> (cons string ()))) ()))))

(declare concat
 (cons symbol
  (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ()))))

(declare cons? (cons A (cons --> (cons boolean ()))))

(declare destroy
 (cons (cons A (cons --> (cons B ())))
  (cons --> (cons (cons A (cons --> (cons B ()))) ()))))

(declare difference
 (cons (cons list (cons A ()))
  (cons -->
   (cons
    (cons (cons list (cons A ()))
     (cons --> (cons (cons list (cons A ())) ())))
    ()))))

(declare do (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ()))))

(declare dump
 (cons string
  (cons --> (cons (cons string (cons --> (cons string ()))) ()))))

(declare element?
 (cons A
  (cons -->
   (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ()))))

(declare empty? (cons A (cons --> (cons boolean ()))))

(declare interror
 (cons string (cons --> (cons (cons A (cons --> (cons B ()))) ()))))

(declare error-to-string (cons error (cons --> (cons string ()))))

(declare explode (cons A (cons --> (cons (cons list (cons string ())) ()))))

(declare fail-if
 (cons (cons symbol (cons --> (cons boolean ())))
  (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ()))))

(declare fix
 (cons (cons A (cons --> (cons A ())))
  (cons --> (cons (cons A (cons --> (cons A ()))) ()))))

(declare floor (cons number (cons --> (cons number ()))))

(declare format
 (cons (cons stream (cons out ()))
  (cons -->
   (cons
    (cons string (cons --> (cons (cons A (cons --> (cons string ()))) ())))
    ()))))

(declare freeze (cons A (cons --> (cons (cons lazy (cons A ())) ()))))

(declare fst (cons (cons A (cons * (cons B ()))) (cons --> (cons A ()))))

(declare function
 (cons (cons A (cons --> (cons B ())))
  (cons --> (cons (cons A (cons --> (cons B ()))) ()))))

(declare gensym (cons symbol (cons --> (cons symbol ()))))

(declare <-vector
 (cons (cons vector (cons A ()))
  (cons --> (cons (cons number (cons --> (cons A ()))) ()))))

(declare vector->
 (cons (cons vector (cons A ()))
  (cons -->
   (cons
    (cons number
     (cons -->
      (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ())))
    ()))))

(declare vector (cons number (cons --> (cons (cons vector (cons A ())) ()))))

(declare get-time (cons symbol (cons --> (cons number ()))))

(declare hash
 (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare head (cons (cons list (cons A ())) (cons --> (cons A ()))))

(declare hdv (cons (cons vector (cons A ())) (cons --> (cons A ()))))

(declare hdstr (cons string (cons --> (cons string ()))))

(declare if
 (cons boolean
  (cons -->
   (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ())))
    ()))))

(declare include
 (cons (cons list (cons symbol ()))
  (cons --> (cons (cons list (cons symbol ())) ()))))

(declare include-all-but
 (cons (cons list (cons symbol ()))
  (cons --> (cons (cons list (cons symbol ())) ()))))

(declare inferences (cons A (cons --> (cons number ()))))

(declare integer? (cons A (cons --> (cons boolean ()))))

(declare intersection
 (cons (cons list (cons A ()))
  (cons -->
   (cons
    (cons (cons list (cons A ()))
     (cons --> (cons (cons list (cons A ())) ())))
    ()))))

(declare length (cons (cons list (cons A ())) (cons --> (cons number ()))))

(declare limit (cons (cons vector (cons A ())) (cons --> (cons number ()))))

(declare load (cons string (cons --> (cons symbol ()))))

(declare intmake-string
 (cons string (cons --> (cons (cons A (cons --> (cons string ()))) ()))))

(declare intern (cons string (cons --> (cons symbol ()))))

(declare map
 (cons (cons A (cons --> (cons B ())))
  (cons -->
   (cons
    (cons (cons list (cons A ()))
     (cons --> (cons (cons list (cons B ())) ())))
    ()))))

(declare mapcan
 (cons (cons A (cons --> (cons (cons list (cons B ())) ())))
  (cons -->
   (cons
    (cons (cons list (cons A ()))
     (cons --> (cons (cons list (cons B ())) ())))
    ()))))

(declare maxinferences (cons number (cons --> (cons number ()))))

(declare mod
 (cons number
  (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare nl (cons number (cons --> (cons number ()))))

(declare not (cons boolean (cons --> (cons boolean ()))))

(declare nth
 (cons number
  (cons -->
   (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ()))))

(declare number? (cons A (cons --> (cons boolean ()))))

(declare occurrences
 (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ()))))

(declare occurs-check (cons symbol (cons --> (cons boolean ()))))

(declare or
 (cons boolean
  (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))))

(declare intoutput
 (cons string (cons --> (cons (cons A (cons --> (cons string ()))) ()))))

(declare pos
 (cons string
  (cons --> (cons (cons number (cons --> (cons string ()))) ()))))

(declare pr
 (cons string
  (cons -->
   (cons (cons (cons stream (cons out ())) (cons --> (cons string ())))
    ()))))

(declare print (cons A (cons --> (cons A ()))))

(declare profile
 (cons (cons A (cons --> (cons B ())))
  (cons --> (cons (cons A (cons --> (cons B ()))) ()))))

(declare preclude
 (cons (cons list (cons symbol ()))
  (cons --> (cons (cons list (cons symbol ())) ()))))

(declare profile-results (cons A (cons --> (cons symbol ()))))

(declare preclude-all-but
 (cons (cons list (cons symbol ()))
  (cons --> (cons (cons list (cons symbol ())) ()))))

(declare random (cons number (cons --> (cons number ()))))

(declare read-byte
 (cons (cons stream (cons in ())) (cons --> (cons number ()))))

(declare read-file-as-bytelist
 (cons string (cons --> (cons (cons list (cons number ())) ()))))

(declare read-file-as-string (cons string (cons --> (cons string ()))))

(declare remove
 (cons A
  (cons -->
   (cons
    (cons (cons list (cons A ()))
     (cons --> (cons (cons list (cons A ())) ())))
    ()))))

(declare reverse
 (cons (cons list (cons A ()))
  (cons --> (cons (cons list (cons A ())) ()))))

(declare round (cons number (cons --> (cons number ()))))

(declare simple-error (cons string (cons --> (cons A ()))))

(declare snd (cons (cons A (cons * (cons B ()))) (cons --> (cons B ()))))

(declare specialise (cons symbol (cons --> (cons symbol ()))))

(declare spy (cons symbol (cons --> (cons boolean ()))))

(declare sqrt (cons number (cons --> (cons number ()))))

(declare step (cons symbol (cons --> (cons boolean ()))))

(declare stinput (cons A (cons --> (cons (cons stream (cons B ())) ()))))

(declare string? (cons A (cons --> (cons boolean ()))))

(declare sum (cons (cons list (cons number ())) (cons --> (cons number ()))))

(declare str (cons A (cons --> (cons string ()))))

(declare symbol? (cons A (cons --> (cons boolean ()))))

(declare systemf
 (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))))

(declare tail
 (cons (cons list (cons A ()))
  (cons --> (cons (cons list (cons A ())) ()))))

(declare tlstr (cons string (cons --> (cons string ()))))

(declare tlv
 (cons (cons vector (cons A ()))
  (cons --> (cons (cons vector (cons A ())) ()))))

(declare tc (cons symbol (cons --> (cons boolean ()))))

(declare tc? (cons A (cons --> (cons boolean ()))))

(declare thaw (cons (cons lazy (cons A ())) (cons --> (cons A ()))))

(declare track (cons symbol (cons --> (cons symbol ()))))

(declare trap-error
 (cons A
  (cons -->
   (cons (cons (cons error (cons --> (cons A ()))) (cons --> (cons A ())))
    ()))))

(declare tuple? (cons A (cons --> (cons boolean ()))))

(declare union
 (cons (cons list (cons A ()))
  (cons -->
   (cons
    (cons (cons list (cons A ()))
     (cons --> (cons (cons list (cons A ())) ())))
    ()))))

(declare unprofile
 (cons (cons A (cons --> (cons B ())))
  (cons --> (cons (cons A (cons --> (cons B ()))) ()))))

(declare untrack (cons symbol (cons --> (cons symbol ()))))

(declare unspecialise (cons symbol (cons --> (cons symbol ()))))

(declare variable? (cons A (cons --> (cons boolean ()))))

(declare vector? (cons A (cons --> (cons boolean ()))))

(declare version (cons string (cons --> (cons string ()))))

(declare write-to-file
 (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ()))))

(declare y-or-n? (cons string (cons --> (cons boolean ()))))

(declare >
 (cons number
  (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare <
 (cons number
  (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare >=
 (cons number
  (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare <=
 (cons number
  (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))))

(declare =
 (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ()))))

(declare +
 (cons number
  (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare /
 (cons number
  (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare -
 (cons number
  (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare *
 (cons number
  (cons --> (cons (cons number (cons --> (cons number ()))) ()))))

(declare ==
 (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ()))))

