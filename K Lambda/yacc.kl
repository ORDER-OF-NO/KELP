
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-yacc (V1885)
 (cond
  ((and (cons? V1885) (and (= defcc (hd V1885)) (cons? (tl V1885))))
   (shen-yacc->shen (hd (tl V1885)) (tl (tl V1885))))
  (true (shen-sys-error shen-yacc))))

(defun shen-yacc->shen (V1886 V1887)
 (cons define
  (cons V1886
   (shen-yacc_cases
    (map (function shen-cc_body) (shen-split_cc_rules V1887 ()))))))

(defun shen-yacc_cases (V1888)
 (append (mapcan (lambda Case (cons Stream (cons <- (cons Case ())))) V1888)
  (cons _ (cons -> (cons (cons fail ()) ())))))

(defun shen-first_n (V1893 V1894)
 (cond ((= 0 V1893) ()) ((= () V1894) ())
  ((cons? V1894) (cons (hd V1894) (shen-first_n (- V1893 1) (tl V1894))))
  (true (shen-sys-error shen-first_n))))

(defun shen-split_cc_rules (V1895 V1896)
 (cond ((and (= () V1895) (= () V1896)) ())
  ((= () V1895) (cons (shen-split_cc_rule (reverse V1896) ()) ()))
  ((and (cons? V1895) (= ; (hd V1895)))
   (cons (shen-split_cc_rule (reverse V1896) ())
    (shen-split_cc_rules (tl V1895) ())))
  ((cons? V1895) (shen-split_cc_rules (tl V1895) (cons (hd V1895) V1896)))
  (true (shen-sys-error shen-split_cc_rules))))

(defun shen-split_cc_rule (V1897 V1898)
 (cond
  ((and (cons? V1897)
    (and (= := (hd V1897))
     (and (cons? (tl V1897)) (= () (tl (tl V1897))))))
   (cons (reverse V1898) (tl V1897)))
  ((and (cons? V1897) (= := (hd V1897)))
   (cons (reverse V1898) (cons (shen-cons_form (tl V1897)) ())))
  ((= () V1897)
   (do (intoutput "warning: " ())
    (do (map (lambda X (intoutput "~A " (@p X ()))) (reverse V1898))
     (do (intoutput "has no semantics.~%" ())
      (shen-split_cc_rule
       (cons := (cons (shen-default_semantics (reverse V1898)) ())) V1898)))))
  ((cons? V1897) (shen-split_cc_rule (tl V1897) (cons (hd V1897) V1898)))
  (true (shen-sys-error shen-split_cc_rule))))

(defun shen-default_semantics (V1899)
 (cond ((= () V1899) ())
  ((and (cons? V1899) (shen-grammar_symbol? (hd V1899)))
   (let PS (cons snd (cons (concat Parse_ (hd V1899)) ()))
    (if (empty? (tl V1899)) PS
     (cons append (cons PS (cons (shen-default_semantics (tl V1899)) ()))))))
  ((cons? V1899)
   (cons cons
    (cons (hd V1899) (cons (shen-default_semantics (tl V1899)) ()))))
  (true (shen-sys-error shen-default_semantics))))

(defun shen-cc_body (V1900)
 (cond
  ((and (cons? V1900) (and (cons? (tl V1900)) (= () (tl (tl V1900)))))
   (shen-syntax (hd V1900) Stream (hd (tl V1900))))
  (true (shen-sys-error shen-cc_body))))

(defun shen-syntax (V1901 V1902 V1903)
 (cond
  ((= () V1901)
   (cons shen-reassemble
    (cons (cons fst (cons V1902 ())) (cons (shen-semantics V1903) ()))))
  ((cons? V1901)
   (if (shen-grammar_symbol? (hd V1901))
    (shen-recursive_descent V1901 V1902 V1903)
    (if (shen-terminal? (hd V1901)) (shen-check_stream V1901 V1902 V1903)
     (if (shen-jump_stream? (hd V1901)) (shen-jump_stream V1901 V1902 V1903)
      (if (shen-list_stream? (hd V1901))
       (shen-list_stream (shen-decons (hd V1901)) (tl V1901) V1902 V1903)
       (interror "~A is not legal syntax~%" (@p (hd V1901) ())))))))
  (true (shen-sys-error shen-syntax))))

(defun shen-list_stream? (V1912) (cond ((cons? V1912) true) (true false)))

(defun shen-decons (V1913)
 (cond
  ((and (cons? V1913)
    (and (= cons (hd V1913))
     (and (cons? (tl V1913))
      (and (cons? (tl (tl V1913))) (= () (tl (tl (tl V1913))))))))
   (cons (hd (tl V1913)) (shen-decons (hd (tl (tl V1913))))))
  (true V1913)))

(defun shen-list_stream (V1914 V1915 V1916 V1917)
 (let Test
  (cons and
   (cons (cons cons? (cons (cons fst (cons V1916 ())) ()))
    (cons
     (cons cons? (cons (cons hd (cons (cons fst (cons V1916 ())) ())) ()))
     ())))
  (let Action
   (cons shen-snd-or-fail
    (cons
     (shen-syntax V1914
      (cons shen-reassemble
       (cons (cons hd (cons (cons fst (cons V1916 ())) ()))
        (cons (cons snd (cons V1916 ())) ())))
      (cons shen-leave!
       (cons
        (shen-syntax V1915
         (cons shen-reassemble
          (cons (cons tl (cons (cons fst (cons V1916 ())) ()))
           (cons (cons snd (cons V1916 ())) ())))
         V1917)
        ())))
     ()))
   (let Else (cons fail ())
    (cons if (cons Test (cons Action (cons Else ()))))))))

(defun shen-snd-or-fail (V1924)
 (cond ((tuple? V1924) (snd V1924)) (true (fail))))

(defun shen-grammar_symbol? (V1925)
 (and (symbol? V1925)
  (let Cs (explode V1925)
   (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen-recursive_descent (V1926 V1927 V1928)
 (cond
  ((cons? V1926)
   (let Test (cons (hd V1926) (cons V1927 ()))
    (let Action (shen-syntax (tl V1926) (concat Parse_ (hd V1926)) V1928)
     (let Else (cons fail ())
      (cons let
       (cons (concat Parse_ (hd V1926))
        (cons Test
         (cons
          (cons if
           (cons
            (cons not
             (cons
              (cons =
               (cons (cons fail ()) (cons (concat Parse_ (hd V1926)) ())))
              ()))
            (cons Action (cons Else ()))))
          ()))))))))
  (true (shen-sys-error shen-recursive_descent))))

(defun shen-terminal? (V1937)
 (cond ((cons? V1937) false) ((= -*- V1937) false) (true true)))

(defun shen-jump_stream? (V1942) (cond ((= -*- V1942) true) (true false)))

(defun shen-check_stream (V1943 V1944 V1945)
 (cond
  ((cons? V1943)
   (let Test
    (cons and
     (cons (cons cons? (cons (cons fst (cons V1944 ())) ()))
      (cons
       (cons =
        (cons (hd V1943)
         (cons (cons hd (cons (cons fst (cons V1944 ())) ())) ())))
       ())))
    (let Action
     (shen-syntax (tl V1943)
      (cons shen-reassemble
       (cons (cons tl (cons (cons fst (cons V1944 ())) ()))
        (cons (cons snd (cons V1944 ())) ())))
      V1945)
     (let Else (cons fail ())
      (cons if (cons Test (cons Action (cons Else ()))))))))
  (true (shen-sys-error shen-check_stream))))

(defun shen-reassemble (V1947 V1948)
 (cond ((= V1948 (fail)) V1948) (true (@p V1947 V1948))))

(defun shen-jump_stream (V1949 V1950 V1951)
 (cond
  ((cons? V1949)
   (let Test (cons cons? (cons (cons fst (cons V1950 ())) ()))
    (let Action
     (shen-syntax (tl V1949)
      (cons shen-reassemble
       (cons (cons tl (cons (cons fst (cons V1950 ())) ()))
        (cons (cons snd (cons V1950 ())) ())))
      V1951)
     (let Else (cons fail ())
      (cons if (cons Test (cons Action (cons Else ()))))))))
  (true (shen-sys-error shen-jump_stream))))

(defun shen-semantics (V1952)
 (cond
  ((and (cons? V1952)
    (and (= shen-leave! (hd V1952))
     (and (cons? (tl V1952)) (= () (tl (tl V1952))))))
   (hd (tl V1952)))
  ((= () V1952) ())
  ((shen-grammar_symbol? V1952) (cons snd (cons (concat Parse_ V1952) ())))
  ((= -o- V1952) (cons snd (cons Semantics ())))
  ((= -*- V1952) (cons hd (cons (cons fst (cons Stream ())) ())))
  ((= -s- V1952) (cons fst (cons Stream ())))
  ((cons? V1952) (map (function shen-semantics) V1952)) (true V1952)))

(defun fail () fail!)

